(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{336:function(t,e,n){"use strict";n.r(e);var s=n(33),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"vue三-用户登录状态保存和判断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue三-用户登录状态保存和判断"}},[t._v("#")]),t._v(" [Vue三]:用户登录状态保存和判断")]),t._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#_1-vuex的导入、注册和基本用法"}},[t._v("1.vuex的导入、注册和基本用法")])]),n("li",[n("a",{attrs:{href:"#_2-登录功能中完善对token的存储"}},[t._v("2.登录功能中完善对token的存储")])]),n("li",[n("a",{attrs:{href:"#_3-跳转home页面完成数据请求加载和渲染"}},[t._v("3.跳转home页面完成数据请求加载和渲染")])]),n("li",[n("a",{attrs:{href:"#_4-路由跳转判定和请求验证"}},[t._v("4.路由跳转判定和请求验证")])]),n("li",[n("a",{attrs:{href:"#_5-总结"}},[t._v("5.总结")])])])]),n("p"),t._v(" "),n("h2",{attrs:{id:"_1-vuex的导入、注册和基本用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-vuex的导入、注册和基本用法"}},[t._v("#")]),t._v(" 1.vuex的导入、注册和基本用法")]),t._v(" "),n("p",[t._v("1、在src目录下新建store目录，并在目录下新建index.js文件\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190824201657510.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxOTY3OTg1,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}}),t._v("\n2、参照"),n("a",{attrs:{href:"https://vuex.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vuex的用法"),n("OutboundLink")],1),t._v("对登录中用户的token进行全局的定义和存储")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import Vue from 'vue'\nimport vuex from 'vuex'\nVue.use(vuex)\nexport default new vuex.Store({\n    /**\n     * 公共数据存放区 */\n    state:{\n        Authorization: sessionStorage.getItem('Authorization') ?  sessionStorage.getItem('Authorization'):''    //从sessionStorage中获取token,没有就默认为空\n    },\n    /**\n     * 修改数据要通过的mutations */\n    mutations:{\n        changeToken(state, token){\n            state.Authorization = token\n            sessionStorage.setItem('Authorization', token)\n        }\n    },\n    /**\n     * 获取数据可以用上的getters */\n    getters:{\n        getToken(state) {\n            return state.Authorization\n        }\n    },\n    /**\n     * 异步处理可能用上的actions */\n    actions:{\n    }\n})\n")])])]),n("p",[t._v('Vuex的导入及注册和vue-rouer一样。做一个不恰当的类比：state相当于组件中的data，mutations相当于组件中的methods，getters相当于组件中的computed。在state中我们定义存放token的字段"Authorization"，并且用三元表达式为其赋值，sessionStarage为浏览器的一次会话的存储空间，会话结实就会清空；在mutations中我们定义一个方法"changeToken"来对token进行存放和赋值给state中的"Authorization"。\n3、建立和定义好Vuex后要在main.js中对vuex进行全局的注册和实例化：')]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import store  from './store/index'\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App),\n}).$mount('#app')\n")])])]),n("p",[t._v("到此，就可以在项目的任意地方对'Authorization'进行赋值和获取了。")]),t._v(" "),n("h2",{attrs:{id:"_2-登录功能中完善对token的存储"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-登录功能中完善对token的存储"}},[t._v("#")]),t._v(" 2.登录功能中完善对token的存储")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\t//点击登录按钮执行访问请求并判断是否登陆\n    toHome(){\n      this.$axios({\n        method: 'post',\n        url: '/loginapp',\n        data: this.$qs.stringify({          //axios的post方法访问后端this.qs.stringify(\n          usename: this.usename,\n          password: this.password\n        }), \n      })\n      .then(res=>{                    //请求成功后执行函数\n        if(res.data.msg === 'S'){\n          this.$store.commit('changeToken',res.data.token)    //对token进行存储\n          this.$router.push('/home')                          //路由跳转到home界面\n          this.$notify({\n            title: '提示',\n            message: '用户登录成功',\n            duration: 3000\n          });\n        }else{\n          this.$notify({\n            title: '提示',\n            message: '用户登录失败',\n            duration: 3000\n          });\n        }\n      })\n      .catch(err=>{                   //请求错误后执行函数\n        this.$notify({\n              title: '提示',\n              message: '用户访问错误',\n              duration: 3000\n            });\n        console.log(err)\n      })\n    }\n  }\n")])])]),n("p",[t._v("这里贴出来的时登录的完整功能代码，通过"),n("strong",[t._v("res.data.token")]),t._v("获取到服务器返回来的token，前面对vuex进行了全局的注册，在这里通过代码"),n("strong",[t._v("his.$store.commit('changeToken',res.data.token)")]),t._v(" 实现对mutations中changeToken的调用，并且将token值传入，将token分别存入"),n("strong",[t._v("state和sessionStorage")]),t._v("中供后面使用。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\tmutations:{\n        changeToken(state, token){\n            state.Authorization = token\n            sessionStorage.setItem('Authorization', token)\n        }\n    },\n")])])]),n("h2",{attrs:{id:"_3-跳转home页面完成数据请求加载和渲染"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-跳转home页面完成数据请求加载和渲染"}},[t._v("#")]),t._v(" 3.跳转home页面完成数据请求加载和渲染")]),t._v(" "),n("p",[t._v("此处要是实现跳转到home页面时已经完成对服务器数据的加载和在页面上的渲染。首先用element-ui的table标签进行模板布局，在方法中调用axios的get方法向服务器发送请求，最终将请求的数据渲染在页面上：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<template>\n  <el-table\n    :data="tableData"\n    stripe\n    style="width: 100%">\n    <el-table-column\n      prop="date"\n      label="日期"\n      width="180">\n    </el-table-column>\n    <el-table-column\n      prop="name"\n      label="姓名"\n      width="180">\n    </el-table-column>\n    <el-table-column\n      prop="address"\n      label="地址">\n    </el-table-column>\n  </el-table>\n</template>\n\n<script>\nimport { type } from \'os\';\nexport default {\n  /**\n  数据存放去 */\n  data(){\n    return{\n      tableData:\'\'\n    }\n  },\n  /**\n  创建vue实例后执行的钩子函数 */\n  created(){\n    this.getInfos()\n  },\n  /**\n  方法区 */\n  methods:{\n    /**获取后端数据 */\n    getInfos(){\n      this.$axios.get(\'/getInfos\')\n        .then(res=>{\n          this.tableData = JSON.parse(res.data.infos)\n        })\n        .catch(err=>{\n          this.$message({\n            message:\'获取数据错误\',\n            type: \'error\',\n            duration: 3000\n          })\n        })\n    }\n  },\n}\n<\/script>\n')])])]),n("p",[t._v("在methods中定义getInfos方法请求服务器数据，同时用"),n("strong",[t._v("JSON.parse(res.data.infos)"),n("strong",[t._v("将数据转为json格式数据并赋值给template模板的table中绑定的tableData。要想实现载页面加载之前就在Dom中对表格渲染完成，需要将getInfos方法放入Vue生命周期函数created中。\n至此我们可以是实现登录并且数据加载，如图:\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190824205747376.gif",alt:"在这里插入图片描述"}}),t._v("\n但是也存在问题：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190824210730465.gif",alt:"在这里插入图片描述"}}),t._v("\n在浏览器的地址栏，直接输入")]),t._v("http://localhost:8081/#/home")]),t._v("就会跳过登陆界面直接进入home界面，显然这样是不安全，也是实际开发中不可为的，登录功能也就失去了他的意义。")]),t._v(" "),n("h2",{attrs:{id:"_4-路由跳转判定和请求验证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-路由跳转判定和请求验证"}},[t._v("#")]),t._v(" 4.路由跳转判定和请求验证")]),t._v(" "),n("p",[t._v("对此，我们需要：\n1.在每次页面跳转的时候对路由地址进行判定，如果是登录界面直接跳转过去，如果是其他页面，需要对用户的token进行判定，如果token和服务器的token一致，允许路由跳转，如果token为空或者与服务器的token不一致，阻止路由跳转并将页面跳转到登录页让用户登录；\n2.对于用户每次请求服务器的数据的请求也要进行判定和用户信息验证。让用户的每次请求头中带上登录成功时存储在sessionStorage的'Authorization'对应的token，并且将用户携带的token和服务器中对应的用户token进行对比，验证通过返回用户请求的数据和通过标识；验证不通过返回让用户重新登录得标识；\n"),n("strong",[t._v("因此，在页面进行跳转和请求之前，请求数据返回给用户之前进行拦截判定")]),t._v("：\n在main.js中调用axios.interceptors和router.beforeEach方法进行拦截和判定")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import Vue from 'vue'\nimport App from './App.vue'\nimport ElementUI from 'element-ui'\nimport 'element-ui/lib/theme-chalk/index.css'\nimport axios from 'axios'\nimport qs from 'qs';\nimport router from './router/router'\nimport store  from './store/index'\n\nVue.config.productionTip = false\nVue.use(ElementUI)\nVue.prototype.$axios = axios\nVue.prototype.$qs = qs\n\n//定义全局默认配置所有的请求头中都带上Authorization的token\naxios.defaults.headers.common['Authorization'] = ''\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App),\n}).$mount('#app')\n\n//所有求情发送出去之前要经过axios请求拦截器\naxios.interceptors.request.use(\n  config => {\n    if(config.url != '/loginapp'){\t\t\t//如果不是登录得请求\n      if(sessionStorage.getItem('Authorization')){\t\t\t\t//判断浏览器中是否有token\n        config.headers.Authorization = sessionStorage.getItem('Authorization')\t\t//如果有token就带上token请求服务器数据\n      }else{\n        this.$router.push('/')\t\t\t\t\t\t\t//如果浏览器中没有token就跳转到登陆界面\n      }\n    }\n    return config;\n  },\n  err => {\n    return Promise.reject(err);\n  }\n),\n//所有求情的结果返回之前要经过axios响应拦截器\naxios.interceptors.response.use(\n  res => {\n    if(res.data.msg === 'S'){\t\t\t\t\t//如果服务器对用户验证通过返回“S”成功标签就将用户需要的数据传递给请求的地方\n      return res\n    }\n  },\n  err => {\n    err\t\t\t\t//如果服务器对用户验证不通过，清空浏览器中可能是失效了得token并跳转到登陆界面\n    sessionStorage.removeItem('Authorization');\n    this.$router.push('/');\n  }\n),\n//路由跳转之前进行判断\nrouter.beforeEach((to, from, next) =>{\t\t\n  if(to.path === '/'){\t\t\t//每次页面路由跳转的时候进行判断，如果是跳转到登陆界面就直接放行\n    next()\n  }else{\n    let token = sessionStorage.getItem('Authorization')\t\n    if(token === \"null\" || token === ''){\t\t\t//如果是跳转到其他页面，先判断token是否为空或者是否存在，不存在就跳转到登陆界面重新登陆\n      next('/')\n    }\n    else{\t\t\t\t\t\t\t\t//如果有token直接放行\n      next()\n    }\n  }\n});\n")])])]),n("p",[t._v("我们来看效果：\n"),n("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190824214440604.gif",alt:"在这里插入图片描述"}}),t._v("\n在地址栏中修改地址跳过登录页面发现已经无法像上次那样直接跳转，说明拦截验证成功，输入用户名和密码自此登陆成功！")]),t._v(" "),n("h2",{attrs:{id:"_5-总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-总结"}},[t._v("#")]),t._v(" 5.总结")]),t._v(" "),n("p",[t._v("综合"),n("a",{attrs:{href:"https://blog.csdn.net/qq_31967985/article/details/99706139",target:"_blank",rel:"noopener noreferrer"}},[t._v("[Vue二]：实现页面登录功能，element-ui，vue-router，axios的学习"),n("OutboundLink")],1),t._v("和[vue三]：用户登录状态保存和请求进行判断，vuex结合vue-router，axios的学习，实现了用户登录得完成功能其中涉及以下知识点：element-ui、"),n("strong",[t._v("vue-router、axios、Vuex")]),t._v("基本使用，其中加粗内容为重点知识，通过具体实例，对用户登录请求和数据请求安全性有了深入的了解。")]),t._v(" "),n("p",[t._v("欢迎大家关注本人的微信公众号，微信公众号将不定期发送相应学习文章和教程")]),t._v(" "),n("p",[n("strong",[n("center",[t._v("微信号：chiyizao")])],1),t._v(" "),n("center",[t._v("或者微信公众号搜索：")]),n("center",[t._v("迟亦早")]),t._v(" "),n("strong",[n("center",[t._v("二维码")])],1),t._v(" "),n("center",[n("img",{staticStyle:{height:"250px",width:"250px"},attrs:{src:"/vxgzhcode.jpg"}})])],1)])}),[],!1,null,null,null);e.default=o.exports}}]);