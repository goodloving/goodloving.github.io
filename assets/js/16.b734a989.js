(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{338:function(e,n,t){"use strict";t.r(n);var s=t(33),r=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"vue五-vue和echarts结合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue五-vue和echarts结合"}},[e._v("#")]),e._v(" [Vue五]:Vue和echarts结合")]),e._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#_1-echarts了解"}},[e._v("1.echarts了解")])]),t("li",[t("a",{attrs:{href:"#_2-实现思路"}},[e._v("2.实现思路")])]),t("li",[t("a",{attrs:{href:"#_3-vue项目中echarts的实现"}},[e._v("3.Vue项目中echarts的实现")])]),t("li",[t("a",{attrs:{href:"#_4-初步效果及问题"}},[e._v("4.初步效果及问题")])]),t("li",[t("a",{attrs:{href:"#_5-echarts图表对屏幕大小自适应"}},[e._v("5.echarts图表对屏幕大小自适应")])])])]),t("p"),e._v(" "),t("h2",{attrs:{id:"_1-echarts了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-echarts了解"}},[e._v("#")]),e._v(" 1.echarts了解")]),e._v(" "),t("p",[e._v("作为一个前端开发人员，对于"),t("a",{attrs:{href:"https://www.echartsjs.com/zh/index.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("echarts"),t("OutboundLink")],1),e._v("应该是十分熟悉的，在日常开发中，大多数关于数据的展示是通过图表实现的，而rcharts则是图表展示的首选js库。")]),e._v(" "),t("h2",{attrs:{id:"_2-实现思路"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现思路"}},[e._v("#")]),e._v(" 2.实现思路")]),e._v(" "),t("p",[e._v("在本例中实现一个页面中按照4x3的布局排列12个echarts折线图，并且每个折线图是通过父组件传值给子组件通过for循环实现的。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190901105448672.?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMxOTY3OTg1,size_16,color_FFFFFF,t_70",alt:"在这里插入图片描述"}})]),e._v(" "),t("h2",{attrs:{id:"_3-vue项目中echarts的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue项目中echarts的实现"}},[e._v("#")]),e._v(" 3.Vue项目中echarts的实现")]),e._v(" "),t("p",[e._v("1.导入echarts并注册\n在当前文件夹下输入命令：")]),e._v(" "),t("blockquote",[t("p",[e._v("npm i echarts -S")])]),e._v(" "),t("p",[e._v("在main.js中导入模块并注册：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import echarts from 'echarts'\nVue.prototype.$echarts = echarts\n")])])]),t("p",[e._v("2.在在components目录新建subcomponents目录存放子组件，并在其下新建SubEcharts.vue组件作为子组件实现echarts绘图和接受父组件的参数：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("<template>\n  <div :id=\"echartsId\" class=\"echarts\"></div>\n</template>\n\n<script>\nexport default {\n  /**父组件传值 */\n  props:{\n    idCode: {\n      type: Number,\n      required: true\n    }\n  },\n\n  /**数据 */\n  data(){\n    return{\n      xAxisData: [1,2,3,4,5,6,7,8,9,10,11,12],\n      dataTest:[5,9,3,7,8,12,45,25,11,6,9,20],\n    }\n  },\n\n  /**计算属性 */\n  computed:{\n    echartsId(){\n      return 'echarts' + this.idCode\n    }\n  },\n\n  /**挂在函数 */\n  mounted(){\n    this.drowLine()\n  },\n\n  methods:{\n    /**绘制折线图 */\n    drowLine(){\n      let echarts = this.$echarts.init(document.getElementById(this.echartsId));\n      let echartsid = document.getElementById(this.echartsId)\n      echarts.setOption({\n        backgroundColor:'#000',\n        title: {\n          text: 'vue项目中echarts的使用',\n          textStyle: {\n            color:'#fff',\n            fontSize:18,\n            fontWeight:'bold',\n          },\n          subtext:'作者:微信-迟亦早(chiyizao)，csdn-goodlovingz',\n          subtextStyle: {\n            color:'#ddd',\n          },\n        },\n        legend:{\n          bottom:'5%',\n          textStyle: {\n            color: '#fff',\n            fontSize: 12,\n          },\n          data: ['测试数据'],\n        },\n        tooltip:{\n          show:true,\n          trigger: 'axis',\n          axisPointer: {\n            type:'cross',\n            crossStyle:{\n              color:'#ddd',\n            },\n          },\n        }, \n        grid:{\n          left:20,\n          right:20,\n          top:80,\n          bottom:20,\n          containLabel:true,\n        },\n        xAxis: {\n          show:true,\n          axisLabel:{\n            interval:1,\n            rotate:-20,\n            margin: 30,\n            textStyle:{\n              color:'#ddd',\n              align: 'center'\n            },\n          },\n          axisTick:{\n              alignWithLabel:true,\n              lineStyle:{\n                color:'#ddd',   \n              },\n          },\n          data: this.xAxisData,\n        },\n        yAxis: [\n          {\n            type:'value',\n            name:'(人/次)',\n            nameTextStyle:{\n                color:'#ddd',\n            },\n            axisLabel:{\n            textStyle:{\n                  color:'#ddd',\n            },\n            },\n            axisTick:{\n              alignWithLabel:true,\n              lineStyle:{\n                  color:'#ddd',\n                  \n              },\n            },\n            splitLine:{\n                show:false,\n            },\n          },\n        ],\n        series: [\n          {\n            type: 'line',\n            name:'测试',\n            stack:'人数',\n            data: this.dataTest,\n            label: {\n              normal: {\n                show:true,\n                position: 'insideTop',\n                offset:[0,20],\n                textStyle:{\n                  color:'#000',\n                },\n              },\n              emphasis: {\n                textStyle:{\n                  color:'#fff',\n                }, \n              },\n            },\n          },\n        ]\n      });\n  }\n}\n<\/script>\n<style>\n.echarts{\n  width: 100%;\n  height: 35vh;\n  background-color: #fff;\n  margin: 5\n}\n</style>\n")])])]),t("p",[e._v("在子组件中要注意："),t("strong",[e._v("子组件中的div映射到父组件中作为一个单独的div，所以要求div的id不能重复，否则所有的echarts图形会绘制在第一个绘图区重叠和覆盖")]),e._v("。因此，在子组件中我们对div的id绑定计算属性"),t("code",[e._v('<div :id="echartsId" class="echarts"></div>')]),e._v("，并且将父组件中传进来的数据进行组合形成唯一的id防止重复")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**计算属性 */\n  computed:{\n    echartsId(){\n      return 'echarts' + this.idCode\n    }\n  },\n")])])]),t("p",[e._v("子组件中用于绘图的数据都写死了，所以在自己运用时可以通过axios获取数据并整理成绘图的格式传入"),t("strong",[e._v("xAxis:的data和series")]),e._v("相应处即可。")]),e._v(" "),t("p",[e._v("3.在components目录下新建EchartsRoot.vue的echarts布局组件，也就是父组件，并在父组件中导入绘图子组件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<template>\n  <div class="echartsStyle">\n    <el-row>\n      <el-col span="6" v-for="i in 12" :key="i">\n        <subEcharts \n          :idCode=\'i\'>\n        </subEcharts>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n<script>\nimport subEcharts from \'@/components/subcomponents/SubEcharts\'\nexport default {\n  components:{\n    subEcharts\n  }\n\n}\n<\/script>\n<style>\n.body{\n  width: 100%;\n  height: 100vh;\n}\n.echartsStyle{\n  background-color:#000;\n  width: 100%;\n  height: 100px;\n  margin: 10px\n}\n</style>\n')])])]),t("p",[e._v("运用element-ui的layout布局使用v-for循环将绘图子组件"),t("strong",[e._v("subEcharts")]),e._v("包裹起来实现4x3的页面布局,并且传入父组件的数据 "),t("strong",[e._v("i")]),e._v(" 供子组件的props的 "),t("strong",[e._v("idCode")]),e._v(" 接收：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\t<el-col span="6" v-for="i in 12" :key="i">\n        <subEcharts \n          :idCode=\'i\'>\n        </subEcharts>\n    </el-col>\n')])])]),t("p",[e._v("4.在Home.vue中添加跳转的按钮，跳转到echarts的展示组件EchartsRoot.vue\n1）在路由router.js中实现home到echarts展示页面的路由的配置：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import Echarts from '@/components/EchartsRoot.vue'\n\t\t{\n            path: '/echarts',\n            component: Echarts\n        }\n")])])]),t("p",[e._v("2）在home的template中添加html元素，并在methods中实现跳转的方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<el-button type="primary" @click="toEcharts">echarts图表</el-button>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**跳转到echarts界面 */\n    toEcharts(){\n      this.$router.push('/echarts')\n    }\n")])])]),t("h2",{attrs:{id:"_4-初步效果及问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-初步效果及问题"}},[e._v("#")]),e._v(" 4.初步效果及问题")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190901113420481.gif",alt:"在这里插入图片描述"}}),e._v("\n到这里已经基本实现了想要的效果，但是当拖动屏幕大小的时候，4x3的布局的每一个echarts图大小不会随着屏幕自动的改变大小对屏幕进行适应，极大的降低了用户的体验。")]),e._v(" "),t("h2",{attrs:{id:"_5-echarts图表对屏幕大小自适应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-echarts图表对屏幕大小自适应"}},[e._v("#")]),e._v(" 5.echarts图表对屏幕大小自适应")]),e._v(" "),t("p",[e._v("1、如果一个界面只有一个或者每个echarts图都是单独写方法绘制的，那么进行自适应很简单，只需要调用echarts对象的**resize()**函数即可：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//1.通过id获取html元素，调用echarts的init（）方法进行初始化\nlet echarts = this.$echarts.init(document.getElementById('html元素id');\n//2.在绘图的option完成后或者之前调用window.onresize函数并在其中实现echarts.resize()即可\nwindow.onresize = function () {\n  \techarts.resize()\n}\n")])])]),t("p",[e._v("2、对于上例通过v-for循环和父子组建结合，通过复用子组件的方式实现单页面多echarts图的方式这种方法明显行不通。"),t("strong",[e._v("因为在子组件中1方法只局限于当前循环，每个循环结束后子组件就会覆盖resize（）方法，所以当图都加载完以后只有最后一个图能够自适应，其他图的resize（）方法都在循环中一层一层的被覆盖了。")]),e._v("\n当然也可以按照其他思路实现所有图的自适应：在每一次for循环绘图结束时将此循环中的echarts对象传递到父组件一个数组或者列表中进行存放，当所有图都加载完以后在父组件中分别取出存放的每一个echarts对象调用resize（）函数实现所有echarts图的自适应。（思路是这样的没问题，具体过程没有做！）\n本例中采用另外的一种方法实现参考"),t("a",{attrs:{href:"https://blog.csdn.net/LLDD2014425/article/details/86231174",target:"_blank",rel:"noopener noreferrer"}},[e._v("该博客：vue中使用echarts图表自适应的几种基本解决方案"),t("OutboundLink")],1),e._v("：在div上实现类似window的onresize 监听，这样既能实现图表的自适应，也不会因为页面跳转之后无法继续执行页面的onresize 方法！")]),e._v(" "),t("p",[e._v("1）在醒目的assets目录下新建esresize.js文件：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var EleResize = {\n  _handleResize: function (e) {\n    var ele = e.target || e.srcElement\n    var trigger = ele.__resizeTrigger__\n    if (trigger) {\n      var handlers = trigger.__z_resizeListeners\n      if (handlers) {\n        var size = handlers.length\n        for (var i = 0; i < size; i++) {\n          var h = handlers[i]\n          var handler = h.handler\n          var context = h.context\n          handler.apply(context, [e])\n        }\n      }\n    }\n  },\n  _removeHandler: function (ele, handler, context) {\n    var handlers = ele.__z_resizeListeners\n    if (handlers) {\n      var size = handlers.length\n      for (var i = 0; i < size; i++) {\n        var h = handlers[i]\n        if (h.handler === handler && h.context === context) {\n          handlers.splice(i, 1)\n          return\n        }\n      }\n    }\n  },\n  _createResizeTrigger: function (ele) {\n    var obj = document.createElement('object')\n    obj.setAttribute('style',\n      'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden;opacity: 0; pointer-events: none; z-index: -1;')\n    obj.onload = EleResize._handleObjectLoad\n    obj.type = 'text/html'\n    ele.appendChild(obj)\n    obj.data = 'about:blank'\n    return obj\n  },\n  _handleObjectLoad: function (evt) {\n    this.contentDocument.defaultView.__resizeTrigger__ = this.__resizeElement__\n    this.contentDocument.defaultView.addEventListener('resize', EleResize._handleResize)\n  }\n}\nif (document.attachEvent) { // ie9-10\n  EleResize.on = function (ele, handler, context) {\n    var handlers = ele.__z_resizeListeners\n    if (!handlers) {\n      handlers = []\n      ele.__z_resizeListeners = handlers\n      ele.__resizeTrigger__ = ele\n      ele.attachEvent('onresize', EleResize._handleResize)\n    }\n    handlers.push({\n      handler: handler,\n      context: context\n    })\n  }\n  EleResize.off = function (ele, handler, context) {\n    var handlers = ele.__z_resizeListeners\n    if (handlers) {\n      EleResize._removeHandler(ele, handler, context)\n      if (handlers.length === 0) {\n        ele.detachEvent('onresize', EleResize._handleResize)\n        delete ele.__z_resizeListeners\n      }\n    }\n  }\n} else {\n  EleResize.on = function (ele, handler, context) {\n    var handlers = ele.__z_resizeListeners\n    if (!handlers) {\n      handlers = []\n      ele.__z_resizeListeners = handlers\n\n      if (getComputedStyle(ele, null).position === 'static') {\n        ele.style.position = 'relative'\n      }\n      var obj = EleResize._createResizeTrigger(ele)\n      ele.__resizeTrigger__ = obj\n      obj.__resizeElement__ = ele\n    }\n    handlers.push({\n      handler: handler,\n      context: context\n    })\n  }\n  EleResize.off = function (ele, handler, context) {\n    var handlers = ele.__z_resizeListeners\n    if (handlers) {\n      EleResize._removeHandler(ele, handler, context)\n      if (handlers.length === 0) {\n        var trigger = ele.__resizeTrigger__\n        if (trigger) {\n          trigger.contentDocument.defaultView.removeEventListener('resize', EleResize._handleResize)\n          ele.removeChild(trigger)\n          delete ele.__resizeTrigger__\n        }\n        delete ele.__z_resizeListeners\n      }\n    }\n  }\n}\nexport {EleResize}\n")])])]),t("p",[e._v("2）在SubEcharts.vue中导入esresize.js")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import {EleResize} from '../../assets/esresize.js'\n")])])]),t("p",[e._v("3）在SubEcharts.vue的绘图方法中，首先获取html的div元素，然后调用"),t("strong",[e._v("esresize.js的.on()方法")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("/**绘制折线图 */\n    drowLine(){\n      let echarts = this.$echarts.init(document.getElementById(this.echartsId));\n      let echartsid = document.getElementById(this.echartsId)\n      echarts.setOption({\n        代码省略·····\n      });\n      \n      let listener = function(){\n        echarts.resize()\n      }\n      EleResize.on(echartsid,listener)\n    },\n")])])]),t("p",[e._v("至此，实现了多个方法不会覆盖的echarts图的自适应功能，效果图如下：\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20190901131902588.gif",alt:"在这里插入图片描述"}})]),e._v(" "),t("p",[e._v("欢迎大家关注本人的微信公众号，微信公众号将不定期发送相应学习文章和教程")]),e._v(" "),t("p",[t("strong",[t("center",[e._v("微信号：chiyizao")])],1),e._v(" "),t("center",[e._v("或者微信公众号搜索：")]),t("center",[e._v("迟亦早")]),e._v(" "),t("strong",[t("center",[e._v("二维码")])],1),e._v(" "),t("center",[t("img",{staticStyle:{height:"250px",width:"250px"},attrs:{src:"/vxgzhcode.jpg"}})])],1)])}),[],!1,null,null,null);n.default=r.exports}}]);