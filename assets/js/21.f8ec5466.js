(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{330:function(n,e,t){"use strict";t.r(e);var a=t(33),s=Object(a.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"node-js自带的异步写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js自带的异步写法"}},[n._v("#")]),n._v(" node.js自带的异步写法")]),n._v(" "),t("h2",{attrs:{id:"_1-callback函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-callback函数"}},[n._v("#")]),n._v(" 1.callback函数")]),n._v(" "),t("p",[n._v("  回调就是一个函数的调用过程。那么就从理解这个调用过程开始吧。函数a有一个参数，这个参数是个函数b，当函数a执行完以后执行函数b，那么这个过程就叫回调。\n直接上代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/** \n * node自带的异步写法：：：\n * callback函数 */\nfunction timer(time, callback) {\n  console.log('this is parent function---1')\n  setTimeout(() => {\n    console.log('go to asynchronous function')\n    callback()\n    console.log('after the callback')\n  }, time)\n}\n\ntimer(3000, () => {\n  console.log('this is callback function')\n})\n\n")])])]),t("p",[n._v("运行结果：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("this is parent function---1\ngo to asynchronous function\nthis is callback function\nafter the callback\n")])])]),t("h2",{attrs:{id:"_2-eventemitter（发布订阅模式）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-eventemitter（发布订阅模式）"}},[n._v("#")]),n._v(" 2.EventEmitter（发布订阅模式）")]),n._v(" "),t("p",[n._v("EventEmitter 类由 events 模块定义：")]),n._v(" "),t("blockquote",[t("p",[n._v("const EventEmitter = require('events');")])]),n._v(" "),t("p",[n._v("  events 模块只提供了一个对象： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。\n直接上代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/** \n * node自带的异步写法：：：\n * EventEmitter的 on 和 emit （发布订阅模式） */\nconst EventEmitter = require('events')\nconst observer = new EventEmitter()\n\n//on：：：可以触发多次，允许同一个事件（topic）最多指定10个回调函数，超过10个会发出警告，可以通过   observer.setMaxListeners(20)改为20个\nobserver.on('topic', (x) => {\n  console.log(x, '我订阅了topic，你呢？')\n})\nobserver.on('topic', (y) => {\n  console.log(y, '我也订阅了topic，还有谁呢？')\n})\n//once：：：回调函数只被触发一次\nobserver.once('topic', (x) => {\n  console.log('我是once的订阅者，只被触发一次哟')\n})\n\n\nfunction main() {\n  console.log('start')\n  //第一个参数表示事件名称与 on 注册的事件名一致，后面参数出入为 on 中绑定的回调函数的参数\n  observer.emit('topic', 8)\n  observer.emit('topic', 2)\n  console.log('我已经发送了2个订阅')\n  console.log('end')\n}\n\nmain()\n")])])]),t("p",[n._v("运行结果：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("start\n8 '我订阅了topic，你呢？'\n8 '我也订阅了topic，还有谁呢？'\n我是once的订阅者，只被触发一次哟\n2 '我订阅了topic，你呢？'\n2 '我也订阅了topic，还有谁呢？'\n我已经发送了2个订阅\nend\n")])])]),t("h2",{attrs:{id:"_3-generator生成器函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-generator生成器函数"}},[n._v("#")]),n._v(" 3.Generator生成器函数")]),n._v(" "),t("p",[n._v("  generator（生成器）是ES6标准引入的新的数据类型。一个generator看上去像一个函数，但可以返回多次。generator可以让某一个函数执行某个动作之后暂时停止，之后 再次触发，再次执行。其中，多次返回的界限以 ==yeild== 区分。\n直接上代码：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/** Generator生成器函数 ‘*’语法上比普通函数多了一个星号，\n * 函数体内部可以使用yield和yield*关键字 */\nfunction* doSomething() {\n  console.log('0')\n  console.log('1')\n  yield               //Line(a)\n  console.log('2')\n  console.log('3')\n}\n\n//实例化生成器函数\nvar gen1 = doSomething()\n//打印出‘1’，然后悬停在 Line(a) 处\ngen1.next()\n//恢复Line(a)点的执行，然后打印出‘2’\ngen1.next()\n")])])]),t("p",[n._v("运行结果：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("0\n1\n2\n3\n")])])]),t("h2",{attrs:{id:"_4-小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-小结"}},[n._v("#")]),n._v(" 4.小结")]),n._v(" "),t("p",[n._v("  该篇博客没有运用上的深入的讲解，可以看做是知识点的笔记，对于callback、EventEmitter和Generator的语法的讲解，具体运用场景没有说明。")])])}),[],!1,null,null,null);e.default=s.exports}}]);